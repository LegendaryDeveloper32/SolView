{"version":3,"sources":["components/Transaction/Transaction.js","actions/types.js","reducers/transaction.js","reducers/pair.js","reducers/index.js","store.js","utils/api.js","actions/transaction.js","components/Transaction/Dashboard.js","components/Pair/Pair.js","components/Pair/Dashboard.js","actions/pair.js","App.js","index.js"],"names":["connect","transaction","getLatestTransactions","queryParams","URLSearchParams","window","location","search","base","get","transactions","map","tra","symbol","updatedAt","volume","parseFloat","volumeUSD","quote","className","id","onClick","GET_LATEST_TRANSACTIONS","TRANSACTION_ERROR","GET_PAIR","PAIR_ERROR","initialState","loading","error","transactionReducer","state","action","type","payload","pairs","pair","pairReducer","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","getState","subscribe","api","axios","create","baseURL","headers","interceptors","response","use","res","err","Promise","reject","limit","pairAddress","dispatch","a","data","items","msg","statusText","status","useEffect","row","to","address","price","toFixed","liquidity","liquidityChangePercentage24h","volume24h","volume24hChangePercentage24h","lastTradeHumanTime","getPairs","searchText","dod","i","length","toLowerCase","includes","console","log","push","setAddress","value","onChange","e","target","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.874c34a5.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Transaction = ({ transaction, getLatestTransactions }) => {\r\n  const queryParams = new URLSearchParams(window.location.search);\r\n  const base = queryParams.get('base');\r\n  const quote = queryParams.get('quote');\r\n  const transactions = transaction.map((tra) => (\r\n   tra.base ?  <tr key={tra.updatedAt}>\r\n        <td>{ base == tra.base.symbol ? \"SELL\" : \"BUY\" }</td>\r\n        <td>{tra.updatedAt}</td>\r\n        <td>{tra.volume} { tra.base.symbol}</td>\r\n        <td>{parseFloat(tra.volumeUSD) / parseFloat(tra.volume) } USD</td>\r\n        <td>{tra.volumeUSD} {tra.quote.symbol}</td>\r\n        <td>Raydium</td>\r\n    </tr> : <></>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <table className=\"naji-table\">\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            <th>TIME</th>\r\n            <th>TRADED</th>\r\n            <th>TOKEN PRICE</th>\r\n            <th>BUY/SELL</th>\r\n            <th>DEX</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"roadmoreDiv\">\r\n        <button id=\"btn-loadmore\"  onClick={() => getLatestTransactions(queryParams.get('pairAddress'))}>Load More</button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nTransaction.propTypes = {\r\n  transaction: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(null)(Transaction);\r\n","export const GET_LATEST_TRANSACTIONS = 'GET_LATEST_TRANSACTIONS';\r\nexport const TRANSACTION_ERROR = 'TRANSACTION_ERROR';\r\nexport const SET_ADDRESS = 'SET_ADDRESS';\r\n\r\nexport const GET_PAIR = 'GET_PAIR';\r\nexport const PAIR_ERROR = 'PAIR_ERROR';","import {\r\n  GET_LATEST_TRANSACTIONS,\r\n  TRANSACTION_ERROR\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n  transaction: null,\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nfunction transactionReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_LATEST_TRANSACTIONS:\r\n      return {\r\n        ...state,\r\n        transactions: payload,\r\n        loading: false\r\n      };\r\n    case TRANSACTION_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default transactionReducer;\r\n","import {\r\n  GET_PAIR,\r\n  PAIR_ERROR\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  pairs: [],\r\n  pair: null,\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nfunction pairReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_PAIR:\r\n      return {\r\n        ...state,\r\n        pairs: payload,\r\n        loading: false\r\n      };\r\n    case PAIR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false\r\n      };\r\n\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default pairReducer;\r\n","import { combineReducers } from 'redux';\r\nimport transaction from './transaction';\r\nimport pair from './pair';\r\n\r\nexport default combineReducers({\r\n  pair,\r\n  transaction\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\r\n\r\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\r\nlet currentState = store.getState();\r\n\r\nstore.subscribe(() => {\r\n  // keep track of the previous and current state to compare changes\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport store from '../store';\r\n\r\n// Create an instance of axios\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n/*\r\n  NOTE: intercept any error responses from the api\r\n and check if the token is no longer valid.\r\n ie. Token has expired or user is no longer\r\n authenticated.\r\n logout the user if the token has expired\r\n*/\r\n\r\napi.interceptors.response.use(\r\n  (res) => res,\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\n\r\nexport default api;\r\n","import api from '../utils/api';\r\nimport {\r\n  GET_LATEST_TRANSACTIONS,\r\n  TRANSACTION_ERROR,\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\nlet limit = 10;\r\n// Get Latest Blocks\r\nexport const getLatestTransactions = (pairAddress) => async (dispatch) => {\r\n  try {\r\n    const res = await api.get(`https://api.solscan.io/amm/txs?address=${pairAddress}&type=all&offset=0&limit=${limit}`);\r\n    limit += 10;\r\n    dispatch({\r\n      type: GET_LATEST_TRANSACTIONS,\r\n      payload: res.data.data.items\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TRANSACTION_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Transaction from './Transaction';\r\nimport { getLatestTransactions } from '../../actions/transaction';\r\n\r\nconst Dashboard = ({  \r\n  getLatestTransactions,\r\n  transaction\r\n}) => {\r\n  const queryParams = new URLSearchParams(window.location.search);\r\n  useEffect(() => {\r\n    getLatestTransactions(queryParams.get('pairAddress'));\r\n  }, [getLatestTransactions]);\r\n\r\n  return (\r\n    <section className=\"naji-container\">\r\n      <div className=\"naji-cbody\"> \r\n        <h2>Transactions</h2>\r\n        {/* <br />\r\n        <span>Search: <input type=\"text\" className=\"m-input naji-searchText\" id=\"searchText\" /><button id=\"searchBtn\">Search</button></span> */}\r\n        <hr />\r\n        <Transaction transaction={transaction.transactions} getLatestTransactions = {getLatestTransactions} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  getLatestTransactions: PropTypes.func.isRequired,\r\n  transaction: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  transaction: state.transaction\r\n});\r\n\r\nexport default connect(mapStateToProps, { getLatestTransactions })(\r\n  Dashboard\r\n);\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Pair = ({ pair }) => {\r\n  const pairs = pair.map((row) => (\r\n    row.base ?  <tr key={row.address}>\r\n        <td className=\"cursor-pointer\"><Link className=\"naji-pair-cursor\" to={`/transaction?pairAddress=${row.address}&base=${row.base.symbol}&quote=${row.quote.symbol}`}>{row.base.symbol} - {row.quote.symbol}</Link></td>\r\n        <td>{parseFloat(row.price).toFixed(5)}</td>\r\n        <td>{parseFloat(row.liquidity).toFixed(2)}</td>\r\n        <td>{ parseFloat(row.liquidityChangePercentage24h).toFixed(2) }%</td>\r\n        <td>{parseFloat(row.volume24h).toFixed(2)}</td>\r\n        <td>{ parseFloat(row.volume24hChangePercentage24h).toFixed(2) }%</td>\r\n        <td>{row.lastTradeHumanTime}</td>\r\n        <td>Trade</td>\r\n    </tr> : <></>\r\n  ));\r\n  \r\n  return (\r\n    <Fragment>\r\n      <table className=\"naji-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Pair</th>\r\n            <th>Price</th>\r\n            <th>TVL</th>\r\n            <th></th>\r\n            <th>Volume 24h</th>\r\n            <th></th>\r\n            <th>Last trade</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {pairs}\r\n        </tbody>\r\n      </table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPair.propTypes = {\r\n  pair: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(null)(Pair);\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getPairs } from '../../actions/pair';\r\nimport Pair from './Pair';\r\n\r\nconst Dashboard = ({  \r\n  getPairs,\r\n  searchText,\r\n  setAddress,\r\n  pair\r\n}) => {\r\n  useEffect(() => {\r\n    getPairs(searchText);\r\n  }, [getPairs]);\r\n\r\n\r\n  const onChange = (e) => {\r\n    searchText = e.target.value;\r\n  }\r\n\r\n  return (\r\n    <section className=\"naji-container\">\r\n      <div className=\"naji-cbody\"> \r\n        <h2>Pair Lists</h2>\r\n        <br />\r\n        <span>\r\n          Search: \r\n          <input type=\"text\" className=\"m-input naji-searchText\" id=\"searchText\" value={searchText} onChange={onChange} />\r\n          <button id=\"searchBtn\" className=\"naji-searchBtn\" onClick={() => getPairs(searchText)}>Search</button></span>\r\n        <hr />\r\n        <Pair pair={pair.pairs}/>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  getPairs: PropTypes.func.isRequired,\r\n  pair: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  pair: state.pair\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPairs })(\r\n  Dashboard\r\n);\r\n","import api from '../utils/api';\r\nimport {\r\n  GET_PAIR,\r\n  PAIR_ERROR,\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Get Latest Blocks\r\nexport const getPairs = (searchText) => async (dispatch) => {\r\n  try {\r\n    var res = await api.get(`https://api.solscan.io/amm/pairs?source=raydium`);\r\n    res = res.data.data.items;\r\n    if(searchText != null) {\r\n      var data = res;\r\n      var dod = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        var name = data[i]['name'];\r\n        if(name.toLowerCase().includes(searchText.toLowerCase()) || data[i]['address'] ==  searchText) {\r\n          console.log(data[i]); \r\n          dod.push(data[i]);\r\n        }\r\n        else if( data[i]['base'] != null ) {\r\n          console.log(data[i]['base']['address']);\r\n          if( data[i]['base']['address'] == searchText || data[i]['quote']['address'] == searchText  ) {\r\n            console.log(data[i]); \r\n            dod.push(data[i]);\r\n          }\r\n        }\r\n      }\r\n      res = dod;\r\n    }\r\n    dispatch({\r\n      type: GET_PAIR,\r\n      payload: res\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PAIR_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nimport Transaction from './components/Transaction/Dashboard';\r\nimport Pair from './components/Pair/Dashboard';\r\n\r\nimport './style.css';\r\n\r\n// Redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Pair />} />\r\n          <Route path=\"/transaction\" element={<Transaction />} />\r\n        </Routes>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}